using System;
using System.Collections.Generic;
using TestsGeneratorLibrary.Structure;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace TestsGeneratorLibrary
{
     internal class TestClassTemplate
    {
          private readonly TreeStructure treeStructure;

          public TestClassTemplate(TreeStructure treeStructure)
          {
               this.treeStructure = treeStructure;
          }

          public IEnumerable<TestClassStructure> GetTestTemplates()
          {
               List<TestClassStructure> testTemplates = new List<TestClassStructure>();

               foreach (ClassInfo classInfo in treeStructure.Classes)
               {
                    NamespaceDeclarationSyntax namespaceDeclaration = NamespaceDeclaration(QualifiedName(
                         IdentifierName(classInfo.NamespaceName), IdentifierName("Tests")));

                    CompilationUnitSyntax compilationUnit = CompilationUnit().
                         WithUsings(GetUsingDirectives(classInfo)).
                         WithMembers(SingletonList<MemberDeclarationSyntax>(namespaceDeclaration.
                              WithMembers(SingletonList<MemberDeclarationSyntax>(ClassDeclaration(classInfo.ClassName + "Tests").
                                   WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(Attribute(IdentifierName("TestClass")))))).
                              WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword))).
                              WithMembers(GetClassMembers(classInfo))))));

                    string fileName = String.Format("{0}Tetst.cs", classInfo.ClassName);
                    string fileData = compilationUnit.NormalizeWhitespace().ToFullString();

                    testTemplates.Add(new TestClassStructure(fileName, fileData));
               }

               return testTemplates;
          }

          private SyntaxList<MemberDeclarationSyntax> GetClassMembers(ClassInfo classInfo)
          {
               List<MemberDeclarationSyntax> classMembers = new List<MemberDeclarationSyntax>();

               foreach (MethodInfo methodInfo in classInfo.Methods)
               {
                    classMembers.Add(GetTestMethodDeclaration(methodInfo));
               }

               return List(classMembers);
          }

          private MemberDeclarationSyntax GetTestMethodDeclaration(MethodInfo methodInfo)
          {
               List<StatementSyntax> blockMembers = new List<StatementSyntax>();
               List<ArgumentSyntax> parameters = new List<ArgumentSyntax>();

               ArgumentListSyntax args = ArgumentList(SingletonSeparatedList(
                    Argument(
                         LiteralExpression(
                              SyntaxKind.StringLiteralExpression,
                              Literal("autogenerated")))));

               blockMembers.Add(ExpressionStatement(
                    InvocationExpression(GetMemberAccessExpression("Assert", "Fail")).WithArgumentList(args)));

               return GetMethodDeclaration("TestMethod", String.Format("{0}Test", methodInfo.Name), List(blockMembers));
          }

          private MemberAccessExpressionSyntax GetMemberAccessExpression(string objectName, string memberName)
          {
               return MemberAccessExpression(
                         SyntaxKind.SimpleMemberAccessExpression,
                         IdentifierName(objectName),
                         IdentifierName(memberName)
                    );
          }

          private MemberDeclarationSyntax GetMethodDeclaration(string attributeName, string methodName, SyntaxList<StatementSyntax> blockMembers)
          {
               MethodDeclarationSyntax methodDeclaration =
                    MethodDeclaration(
                         PredefinedType(
                              Token(SyntaxKind.VoidKeyword)),
                              Identifier(methodName)
                         ).WithAttributeLists(
                              SingletonList(
                                   AttributeList(
                                        SingletonSeparatedList(
                                             Attribute(
                                                  IdentifierName(attributeName)))))).
                           WithModifiers(TokenList(Token(SyntaxKind.PublicKeyword))).
                           WithBody(Block(blockMembers));

               return methodDeclaration;
          }

          private SyntaxList<UsingDirectiveSyntax> GetUsingDirectives(ClassInfo classInfo)
          {
               List<UsingDirectiveSyntax> usingDirectives = new List<UsingDirectiveSyntax>()
               {
                    UsingDirective(IdentifierName("System")),
                    UsingDirective(
                         QualifiedName(
                              QualifiedName(
                                   IdentifierName("System"),
                                   IdentifierName("Collections")
                              ),
                         IdentifierName("Generic"))
                    ),
                    UsingDirective(
                         QualifiedName(
                              IdentifierName("System"),
                              IdentifierName("Linq")
                         )
                    ),
                    UsingDirective(
                         QualifiedName(
                              QualifiedName(
                                   QualifiedName(
                                        IdentifierName("Microsoft"),
                                        IdentifierName("VisualStudio")
                                   ),
                                   IdentifierName("TestTools")
                              ),
                              IdentifierName("UnitTesting")
                         )
                    ),
                    UsingDirective(IdentifierName(classInfo.NamespaceName))
               };

               return List(usingDirectives);
          }


     }
}
